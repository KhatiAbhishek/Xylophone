define(['dart_sdk', 'packages/uuid/uuid_util.dart', 'packages/crypto/src/sha1.dart'], (function load__packages__uuid__uuid_dart(dart_sdk, packages__uuid__uuid_util$46dart, packages__crypto__src__sha1$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const uuid_util = packages__uuid__uuid_util$46dart.uuid_util;
  const sha1 = packages__crypto__src__sha1$46dart.src__sha1;
  var uuid$ = Object.create(dart.library);
  var $toLowerCase = dartx.toLowerCase;
  var $substring = dartx.substring;
  var $_set = dartx._set;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $modulo = dartx['%'];
  var $rightShift = dartx['>>'];
  var $floor = dartx.floor;
  var $codeUnits = dartx.codeUnits;
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $sublist = dartx.sublist;
  var $toRadixString = dartx.toRadixString;
  var $padLeft = dartx.padLeft;
  var $hashCode = dartx.hashCode;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    MapOfSymbol$dynamic: () => (T.MapOfSymbol$dynamic = dart.constFn(core.Map$(core.Symbol, dart.dynamic)))(),
    SymbolL: () => (T.SymbolL = dart.constFn(dart.legacy(core.Symbol)))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    VoidTodynamic: () => (T.VoidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    __ToUint8List: () => (T.__ToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [], {seed: core.int}, {})))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    intToString: () => (T.intToString = dart.constFn(dart.fnType(core.String, [core.int])))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    ExpandoOfMapOfString$dynamic: () => (T.ExpandoOfMapOfString$dynamic = dart.constFn(core.Expando$(T.MapOfString$dynamic())))(),
    ValidationModeL: () => (T.ValidationModeL = dart.constFn(dart.legacy(uuid$.ValidationMode)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: uuid$.ValidationMode.prototype,
        [_name$]: "ValidationMode.strictRFC4122",
        index: 1
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: uuid$.ValidationMode.prototype,
        [_name$]: "ValidationMode.nonStrict",
        index: 0
      });
    },
    get C2() {
      return C[2] = dart.constMap(T.StringL(), dart.dynamic, []);
    },
    get C3() {
      return C[3] = dart.constMap(T.SymbolL(), dart.dynamic, []);
    },
    get C4() {
      return C[4] = dart.constList([], dart.dynamic);
    },
    get C5() {
      return C[5] = dart.fn(uuid_util.UuidUtil.mathRNG, T.__ToUint8List());
    },
    get C6() {
      return C[6] = dart.constList([C[1] || CT.C1, C[0] || CT.C0], T.ValidationModeL());
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "file:///C:/Users/khati/Downloads/flutter_windows_2.2.2-stable/flutter/.pub-cache/hosted/pub.dartlang.org/uuid-3.0.6/lib/uuid.dart",
    "package:uuid/uuid.dart"
  ];
  var options$ = dart.privateName(uuid$, "Uuid.options");
  var _state = dart.privateName(uuid$, "_state");
  var _name$ = dart.privateName(uuid$, "_name");
  var _initV1 = dart.privateName(uuid$, "_initV1");
  var _initV4 = dart.privateName(uuid$, "_initV4");
  uuid$.Uuid = class Uuid extends core.Object {
    get options() {
      return this[options$];
    }
    set options(value) {
      super.options = value;
    }
    get [_state]() {
      let t2, t1, t0;
      t0 = uuid$.Uuid._stateExpando;
      t1 = t0._get(this);
      return t1 == null ? (t2 = new (T.IdentityMapOfString$dynamic()).from(["seedBytes", null, "node", null, "clockSeq", null, "mSecs", 0, "nSecs", 0, "hasInitV1", false, "hasInitV4", false]), t0._set(this, t2), t2) : t1;
    }
    static isValidUUID(opts) {
      let fromString = opts && 'fromString' in opts ? opts.fromString : "";
      if (fromString == null) dart.nullFailed(I[0], 46, 15, "fromString");
      let fromByteList = opts && 'fromByteList' in opts ? opts.fromByteList : null;
      let validationMode = opts && 'validationMode' in opts ? opts.validationMode : C[0] || CT.C0;
      if (validationMode == null) dart.nullFailed(I[0], 48, 22, "validationMode");
      if (fromByteList != null) {
        fromString = uuid$.Uuid.unparse(fromByteList);
      }
      if (fromString == uuid$.Uuid.NAMESPACE_NIL) {
        return true;
      }
      if (fromString.length !== 36) {
        return false;
      }
      switch (validationMode) {
        case C[0] || CT.C0:
        {
          {
            let pattern = "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$";
            let regex = core.RegExp.new(pattern, {caseSensitive: false, multiLine: true});
            let match = regex.hasMatch(fromString);
            return match;
          }
        }
        case C[1] || CT.C1:
        {
          {
            let pattern = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$";
            let regex = core.RegExp.new(pattern, {caseSensitive: false, multiLine: true});
            let match = regex.hasMatch(fromString);
            return match;
          }
        }
        default:
        {
          {
            dart.throw(core.Exception.new("`" + dart.str(validationMode) + "` is an invalid ValidationMode."));
          }
        }
      }
    }
    static isValidOrThrow(opts) {
      let fromString = opts && 'fromString' in opts ? opts.fromString : "";
      if (fromString == null) dart.nullFailed(I[0], 88, 15, "fromString");
      let fromByteList = opts && 'fromByteList' in opts ? opts.fromByteList : null;
      let validationMode = opts && 'validationMode' in opts ? opts.validationMode : C[0] || CT.C0;
      if (validationMode == null) dart.nullFailed(I[0], 90, 22, "validationMode");
      let isValid = uuid$.Uuid.isValidUUID({fromString: fromString, fromByteList: fromByteList, validationMode: validationMode});
      if (!dart.test(isValid)) {
        if (validationMode != uuid$.ValidationMode.nonStrict) {
          let isValidNonStrict = uuid$.Uuid.isValidUUID({fromString: fromString, fromByteList: fromByteList, validationMode: uuid$.ValidationMode.nonStrict});
          if (dart.test(isValidNonStrict)) {
            dart.throw(new core.FormatException.new("The provided UUID is not RFC4122 compliant. It seems you might be using a Microsoft GUID. Try setting `validationMode = ValidationMode.nonStrict`", fromString));
          }
        }
        dart.throw(new core.FormatException.new("The provided UUID is invalid.", fromString));
      }
    }
    static parse(uuid, opts) {
      let t0, t0$;
      if (uuid == null) dart.nullFailed(I[0], 121, 12, "uuid");
      let buffer = opts && 'buffer' in opts ? opts.buffer : null;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      if (offset == null) dart.nullFailed(I[0], 123, 9, "offset");
      let validate = opts && 'validate' in opts ? opts.validate : true;
      if (validate == null) dart.nullFailed(I[0], 124, 10, "validate");
      let validationMode = opts && 'validationMode' in opts ? opts.validationMode : C[0] || CT.C0;
      if (validationMode == null) dart.nullFailed(I[0], 125, 20, "validationMode");
      if (dart.test(validate)) {
        uuid$.Uuid.isValidOrThrow({fromString: uuid, validationMode: validationMode});
      }
      let i = offset;
      let ii = 0;
      buffer = buffer != null ? buffer : _native_typed_data.NativeUint8List.new(16);
      let regex = core.RegExp.new("[0-9a-f]{2}");
      for (let match of regex.allMatches(uuid[$toLowerCase]())) {
        if (ii < 16) {
          let hex = uuid[$toLowerCase]()[$substring](match.start, match.end);
          buffer[$_set](dart.notNull(i) + (t0 = ii, ii = t0 + 1, t0), core.int.parse(hex, {radix: 16}));
        }
      }
      while (ii < 16) {
        buffer[$_set](dart.notNull(i) + (t0$ = ii, ii = t0$ + 1, t0$), 0);
      }
      return buffer;
    }
    static parseAsByteList(uuid, opts) {
      if (uuid == null) dart.nullFailed(I[0], 159, 43, "uuid");
      let buffer = opts && 'buffer' in opts ? opts.buffer : null;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      if (offset == null) dart.nullFailed(I[0], 161, 11, "offset");
      let validate = opts && 'validate' in opts ? opts.validate : true;
      if (validate == null) dart.nullFailed(I[0], 162, 12, "validate");
      let validationMode = opts && 'validationMode' in opts ? opts.validationMode : C[0] || CT.C0;
      if (validationMode == null) dart.nullFailed(I[0], 163, 22, "validationMode");
      return _native_typed_data.NativeUint8List.fromList(uuid$.Uuid.parse(uuid, {buffer: buffer, offset: offset, validate: validate, validationMode: validationMode}));
    }
    static unparse(buffer, opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13;
      if (buffer == null) dart.nullFailed(I[0], 175, 35, "buffer");
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      if (offset == null) dart.nullFailed(I[0], 175, 48, "offset");
      if (buffer[$length] !== 16) {
        dart.throw(core.Exception.new("The provided buffer needs to have a length of 16."));
      }
      let i = offset;
      return dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0 = i, i = dart.notNull(t0) + 1, t0)))) + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$ = i, i = dart.notNull(t0$) + 1, t0$)))) + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$0 = i, i = dart.notNull(t0$0) + 1, t0$0)))) + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$1 = i, i = dart.notNull(t0$1) + 1, t0$1)))) + "-" + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$2 = i, i = dart.notNull(t0$2) + 1, t0$2)))) + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$3 = i, i = dart.notNull(t0$3) + 1, t0$3)))) + "-" + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$4 = i, i = dart.notNull(t0$4) + 1, t0$4)))) + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$5 = i, i = dart.notNull(t0$5) + 1, t0$5)))) + "-" + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$6 = i, i = dart.notNull(t0$6) + 1, t0$6)))) + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$7 = i, i = dart.notNull(t0$7) + 1, t0$7)))) + "-" + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$8 = i, i = dart.notNull(t0$8) + 1, t0$8)))) + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$9 = i, i = dart.notNull(t0$9) + 1, t0$9)))) + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$10 = i, i = dart.notNull(t0$10) + 1, t0$10)))) + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$11 = i, i = dart.notNull(t0$11) + 1, t0$11)))) + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$12 = i, i = dart.notNull(t0$12) + 1, t0$12)))) + dart.str(uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$13 = i, i = dart.notNull(t0$13) + 1, t0$13))));
    }
    [_initV1]() {
      let t0, t2, t1, t0$, t2$, t1$, t0$0, t1$0, t0$1;
      let options = (t0 = this.options, t0 == null ? C[2] || CT.C2 : t0);
      if (!core.bool.as(dart.nullCheck(this[_state][$_get]("hasInitV1")))) {
        let v1PositionalArgs = options[$_get]("v1rngPositionalArgs") != null ? options[$_get]("v1rngPositionalArgs") : [];
        let v1NamedArgs = options[$_get]("v1rngNamedArgs") != null ? T.MapOfSymbol$dynamic().as(options[$_get]("v1rngNamedArgs")) : C[3] || CT.C3;
        let seedBytes = typed_data.Uint8List.as(options[$_get]("v1rng") != null ? core.Function.apply(core.Function.as(options[$_get]("v1rng")), T.ListN().as(v1PositionalArgs), v1NamedArgs) : uuid_util.UuidUtil.mathRNG());
        this[_state][$_get]("seedBytes") != null ? this[_state][$_get]("seedBytes") : (t0$ = this[_state], t1 = "seedBytes", t2 = seedBytes, t0$[$_set](t1, t2), t2);
        let nodeId = T.JSArrayOfint().of([(dart.notNull(seedBytes[$_get](0)) | 1) >>> 0, seedBytes[$_get](1), seedBytes[$_get](2), seedBytes[$_get](3), seedBytes[$_get](4), seedBytes[$_get](5)]);
        this[_state][$_get]("node") != null ? this[_state][$_get]("node") : (t0$0 = this[_state], t1$ = "node", t2$ = nodeId, t0$0[$_set](t1$, t2$), t2$);
        let clockSeq = (dart.notNull(seedBytes[$_get](6)) << 8 | dart.notNull(seedBytes[$_get](7))) & 262143;
        t0$1 = this[_state];
        t1$0 = "clockSeq";
        t0$1[$_get](t1$0) == null ? t0$1[$_set](t1$0, clockSeq) : null;
        this[_state][$_set]("mSecs", 0);
        this[_state][$_set]("nSecs", 0);
        this[_state][$_set]("hasInitV1", true);
      }
    }
    [_initV4]() {
      let t0;
      let options = (t0 = this.options, t0 == null ? C[2] || CT.C2 : t0);
      if (!core.bool.as(dart.nullCheck(this[_state][$_get]("hasInitV4")))) {
        let gPositionalArgs = options[$_get]("gPositionalArgs") != null ? options[$_get]("gPositionalArgs") : C[4] || CT.C4;
        let gNamedArgs = options[$_get]("gNamedArgs") != null ? T.MapOfSymbol$dynamic().as(options[$_get]("gNamedArgs")) : C[3] || CT.C3;
        let grng = options[$_get]("grng");
        this[_state][$_set]("globalRNG", grng != null ? dart.fn(() => core.Function.apply(core.Function.as(grng), T.ListN().as(gPositionalArgs), gNamedArgs), T.VoidTodynamic()) : C[5] || CT.C5);
        this[_state][$_set]("hasInitV4", true);
      }
    }
    v1(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7;
      let options = opts && 'options' in opts ? opts.options : null;
      let i = 0;
      let buf = _native_typed_data.NativeUint8List.new(16);
      options == null ? options = new (T.IdentityMapOfString$dynamic()).new() : null;
      this[_initV1]();
      let clockSeq = options[$_get]("clockSeq") != null ? core.int.as(options[$_get]("clockSeq")) : core.int.as(this[_state][$_get]("clockSeq"));
      let mSecs = options[$_get]("mSecs") != null ? core.int.as(options[$_get]("mSecs")) : new core.DateTime.now().millisecondsSinceEpoch;
      let nSecs = options[$_get]("nSecs") != null ? core.int.as(options[$_get]("nSecs")) : core.int.as(dart.nullCheck(this[_state][$_get]("nSecs"))) + 1;
      let dt = dart.notNull(mSecs) - dart.notNull(core.num.as(this[_state][$_get]("mSecs"))) + (dart.notNull(nSecs) - dart.notNull(core.num.as(this[_state][$_get]("nSecs")))) / 10000;
      if (dt < 0 && options[$_get]("clockSeq") == null) {
        clockSeq = dart.notNull(clockSeq) + 1 & 16383;
      }
      if ((dt < 0 || dart.notNull(mSecs) > dart.notNull(core.num.as(this[_state][$_get]("mSecs")))) && options[$_get]("nSecs") == null) {
        nSecs = 0;
      }
      if (dart.notNull(nSecs) >= 10000) {
        dart.throw(core.Exception.new("uuid.v1(): Can't create more than 10M uuids/sec"));
      }
      this[_state][$_set]("mSecs", mSecs);
      this[_state][$_set]("nSecs", nSecs);
      this[_state][$_set]("clockSeq", clockSeq);
      mSecs = dart.notNull(mSecs) + 12219292800000;
      let tl = ((dart.notNull(mSecs) & 268435455) * 10000 + dart.notNull(nSecs))[$modulo](4294967296);
      buf[$_set]((t0 = i, i = t0 + 1, t0), tl[$rightShift](24) & 255);
      buf[$_set]((t0$ = i, i = t0$ + 1, t0$), tl >> 16 & 255);
      buf[$_set]((t0$0 = i, i = t0$0 + 1, t0$0), tl >> 8 & 255);
      buf[$_set]((t0$1 = i, i = t0$1 + 1, t0$1), tl & 255);
      let tmh = (dart.notNull(mSecs) / 4294967296 * 10000)[$floor]() & 268435455;
      buf[$_set]((t0$2 = i, i = t0$2 + 1, t0$2), tmh >> 8 & 255);
      buf[$_set]((t0$3 = i, i = t0$3 + 1, t0$3), tmh & 255);
      buf[$_set]((t0$4 = i, i = t0$4 + 1, t0$4), tmh >> 24 & 15 | 16);
      buf[$_set]((t0$5 = i, i = t0$5 + 1, t0$5), tmh >> 16 & 255);
      buf[$_set]((t0$6 = i, i = t0$6 + 1, t0$6), (dart.notNull(clockSeq) & 16128) >> 8 | 128);
      buf[$_set]((t0$7 = i, i = t0$7 + 1, t0$7), dart.notNull(clockSeq) & 255);
      let node = options[$_get]("node") != null ? core.List.as(options[$_get]("node")) : core.List.as(this[_state][$_get]("node"));
      for (let n = 0; n < 6; n = n + 1) {
        buf[$_set](i + n, core.int.as(node[$_get](n)));
      }
      return uuid$.Uuid.unparse(buf);
    }
    v1buffer(buffer, opts) {
      if (buffer == null) dart.nullFailed(I[0], 354, 15, "buffer");
      let options = opts && 'options' in opts ? opts.options : null;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      if (offset == null) dart.nullFailed(I[0], 356, 9, "offset");
      return uuid$.Uuid.parse(this.v1({options: options}), {buffer: buffer, offset: offset});
    }
    v1obj(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      let uuid = this.v1({options: options});
      return uuid$.UuidValue.new(uuid);
    }
    v4(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      options == null ? options = new (T.IdentityMapOfString$dynamic()).new() : null;
      this[_initV4]();
      let positionalArgs = options[$_get]("positionalArgs") != null ? options[$_get]("positionalArgs") : [];
      let namedArgs = options[$_get]("namedArgs") != null ? T.MapOfSymbol$dynamic().as(options[$_get]("namedArgs")) : C[3] || CT.C3;
      let rng = options[$_get]("rng") != null ? T.ListOfint().as(core.Function.apply(core.Function.as(options[$_get]("rng")), T.ListN().as(positionalArgs), namedArgs)) : T.ListOfint().as(T.VoidTodynamic().as(dart.nullCheck(this[_state][$_get]("globalRNG")))());
      let rnds = options[$_get]("random") != null ? T.ListOfint().as(options[$_get]("random")) : rng;
      rnds[$_set](6, dart.notNull(rnds[$_get](6)) & 15 | 64);
      rnds[$_set](8, dart.notNull(rnds[$_get](8)) & 63 | 128);
      return uuid$.Uuid.unparse(rnds);
    }
    v4buffer(buffer, opts) {
      if (buffer == null) dart.nullFailed(I[0], 423, 15, "buffer");
      let options = opts && 'options' in opts ? opts.options : null;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      if (offset == null) dart.nullFailed(I[0], 425, 9, "offset");
      return uuid$.Uuid.parse(this.v4({options: options}), {buffer: buffer, offset: offset});
    }
    v4obj(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      let uuid = this.v4({options: options});
      return uuid$.UuidValue.new(uuid);
    }
    v5(namespace, name, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      options == null ? options = new (T.IdentityMapOfString$dynamic()).new() : null;
      let useRandom = options[$_get]("randomNamespace") != null ? options[$_get]("randomNamespace") : true;
      let blankNS = dart.dtest(useRandom) ? this.v4() : uuid$.Uuid.NAMESPACE_NIL;
      namespace = namespace != null ? namespace : blankNS;
      name = name != null ? name : "";
      let bytes = uuid$.Uuid.parse(namespace);
      let nameBytes = T.JSArrayOfint().of([]);
      for (let singleChar of name[$codeUnits]) {
        nameBytes[$add](singleChar);
      }
      let hashBytes = sha1.sha1.convert((() => {
        let t0 = T.ListOfint().of(bytes);
        t0[$addAll](nameBytes);
        return t0;
      })()).bytes;
      hashBytes[$_set](6, dart.notNull(hashBytes[$_get](6)) & 15 | 80);
      hashBytes[$_set](8, dart.notNull(hashBytes[$_get](8)) & 63 | 128);
      return uuid$.Uuid.unparse(hashBytes[$sublist](0, 16));
    }
    v5buffer(namespace, name, buffer, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      if (offset == null) dart.nullFailed(I[0], 505, 9, "offset");
      return uuid$.Uuid.parse(this.v5(namespace, name, {options: options}), {buffer: buffer, offset: offset});
    }
    v5obj(namespace, name, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      let uuid = this.v5(namespace, name, {options: options});
      return uuid$.UuidValue.new(uuid);
    }
  };
  (uuid$.Uuid.new = function(opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    this[options$] = options;
    ;
  }).prototype = uuid$.Uuid.prototype;
  dart.addTypeTests(uuid$.Uuid);
  dart.addTypeCaches(uuid$.Uuid);
  dart.setMethodSignature(uuid$.Uuid, () => ({
    __proto__: dart.getMethods(uuid$.Uuid.__proto__),
    [_initV1]: dart.fnType(dart.void, []),
    [_initV4]: dart.fnType(dart.void, []),
    v1: dart.fnType(core.String, [], {options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v1buffer: dart.fnType(core.List$(core.int), [core.List$(core.int)], {offset: core.int, options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v1obj: dart.fnType(uuid$.UuidValue, [], {options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v4: dart.fnType(core.String, [], {options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v4buffer: dart.fnType(core.List$(core.int), [core.List$(core.int)], {offset: core.int, options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v4obj: dart.fnType(uuid$.UuidValue, [], {options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v5: dart.fnType(core.String, [dart.nullable(core.String), dart.nullable(core.String)], {options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v5buffer: dart.fnType(core.List$(core.int), [dart.nullable(core.String), dart.nullable(core.String), dart.nullable(core.List$(core.int))], {offset: core.int, options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v5obj: dart.fnType(uuid$.UuidValue, [dart.nullable(core.String), dart.nullable(core.String)], {options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {})
  }));
  dart.setGetterSignature(uuid$.Uuid, () => ({
    __proto__: dart.getGetters(uuid$.Uuid.__proto__),
    [_state]: core.Map$(core.String, dart.dynamic)
  }));
  dart.setLibraryUri(uuid$.Uuid, I[1]);
  dart.setFieldSignature(uuid$.Uuid, () => ({
    __proto__: dart.getFields(uuid$.Uuid.__proto__),
    options: dart.finalFieldType(dart.nullable(core.Map$(core.String, dart.dynamic)))
  }));
  dart.defineLazy(uuid$.Uuid, {
    /*uuid$.Uuid.NAMESPACE_DNS*/get NAMESPACE_DNS() {
      return "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    },
    /*uuid$.Uuid.NAMESPACE_URL*/get NAMESPACE_URL() {
      return "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    },
    /*uuid$.Uuid.NAMESPACE_OID*/get NAMESPACE_OID() {
      return "6ba7b812-9dad-11d1-80b4-00c04fd430c8";
    },
    /*uuid$.Uuid.NAMESPACE_X500*/get NAMESPACE_X500() {
      return "6ba7b814-9dad-11d1-80b4-00c04fd430c8";
    },
    /*uuid$.Uuid.NAMESPACE_NIL*/get NAMESPACE_NIL() {
      return "00000000-0000-0000-0000-000000000000";
    },
    /*uuid$.Uuid._byteToHex*/get _byteToHex() {
      return T.ListOfString().generate(256, dart.fn(i => {
        if (i == null) dart.nullFailed(I[0], 22, 70, "i");
        return i[$toRadixString](16)[$padLeft](2, "0");
      }, T.intToString()));
    },
    /*uuid$.Uuid._stateExpando*/get _stateExpando() {
      return new (T.ExpandoOfMapOfString$dynamic()).new();
    }
  }, false);
  uuid$.ValidationMode = class ValidationMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (uuid$.ValidationMode.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 527, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 527, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = uuid$.ValidationMode.prototype;
  dart.addTypeTests(uuid$.ValidationMode);
  dart.addTypeCaches(uuid$.ValidationMode);
  dart.setLibraryUri(uuid$.ValidationMode, I[1]);
  dart.setFieldSignature(uuid$.ValidationMode, () => ({
    __proto__: dart.getFields(uuid$.ValidationMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(uuid$.ValidationMode, ['toString']);
  uuid$.ValidationMode.nonStrict = C[1] || CT.C1;
  uuid$.ValidationMode.strictRFC4122 = C[0] || CT.C0;
  uuid$.ValidationMode.values = C[6] || CT.C6;
  var uuid$0 = dart.privateName(uuid$, "UuidValue.uuid");
  uuid$.UuidValue = class UuidValue extends core.Object {
    get uuid() {
      return this[uuid$0];
    }
    set uuid(value) {
      super.uuid = value;
    }
    static new(uuid, validate = true, validationMode = C[0] || CT.C0) {
      if (uuid == null) dart.nullFailed(I[0], 538, 28, "uuid");
      if (validate == null) dart.nullFailed(I[0], 539, 13, "validate");
      if (validationMode == null) dart.nullFailed(I[0], 540, 22, "validationMode");
      if (dart.test(validate)) {
        uuid$.Uuid.isValidOrThrow({fromString: uuid, validationMode: validationMode});
      }
      return new uuid$.UuidValue.__(uuid[$toLowerCase]());
    }
    static fromByteList(byteList, opts) {
      let t1;
      if (byteList == null) dart.nullFailed(I[0], 548, 44, "byteList");
      let offset = opts && 'offset' in opts ? opts.offset : null;
      return uuid$.UuidValue.new(uuid$.Uuid.unparse(byteList, {offset: (t1 = offset, t1 == null ? 0 : t1)}));
    }
    static fromList(byteList, opts) {
      let t1;
      if (byteList == null) dart.nullFailed(I[0], 552, 40, "byteList");
      let offset = opts && 'offset' in opts ? opts.offset : null;
      return uuid$.UuidValue.new(uuid$.Uuid.unparse(byteList, {offset: (t1 = offset, t1 == null ? 0 : t1)}));
    }
    toBytes() {
      return uuid$.Uuid.parseAsByteList(this.uuid);
    }
    toString() {
      return this.uuid;
    }
    equals(other) {
      if (other == null) dart.nullFailed(I[0], 570, 25, "other");
      return this.uuid == other.uuid;
    }
    _equals(other) {
      if (other == null) return false;
      return uuid$.UuidValue.is(other) && this.uuid == other.uuid;
    }
    get hashCode() {
      return dart.hashCode(this.uuid);
    }
  };
  (uuid$.UuidValue.__ = function(uuid) {
    if (uuid == null) dart.nullFailed(I[0], 556, 20, "uuid");
    this[uuid$0] = uuid;
    ;
  }).prototype = uuid$.UuidValue.prototype;
  dart.addTypeTests(uuid$.UuidValue);
  dart.addTypeCaches(uuid$.UuidValue);
  dart.setMethodSignature(uuid$.UuidValue, () => ({
    __proto__: dart.getMethods(uuid$.UuidValue.__proto__),
    toBytes: dart.fnType(typed_data.Uint8List, []),
    equals: dart.fnType(core.bool, [uuid$.UuidValue])
  }));
  dart.setLibraryUri(uuid$.UuidValue, I[1]);
  dart.setFieldSignature(uuid$.UuidValue, () => ({
    __proto__: dart.getFields(uuid$.UuidValue.__proto__),
    uuid: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(uuid$.UuidValue, ['toString', '_equals']);
  dart.defineExtensionAccessors(uuid$.UuidValue, ['hashCode']);
  dart.trackLibraries("packages/uuid/uuid.dart", {
    "package:uuid/uuid.dart": uuid$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["uuid.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../D:/packages/uuid/uuid.dart.lib.js"}');
  // Exports:
  return {
    uuid: uuid$
  };
}));

//# sourceMappingURL=uuid.dart.lib.js.map
