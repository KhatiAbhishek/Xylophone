define(['dart_sdk', 'packages/audioplayers/src/api/log_level.dart', 'packages/audioplayers/src/api/player_mode.dart', 'packages/audioplayers/src/api/player_state.dart', 'packages/audioplayers/src/api/playing_route.dart', 'packages/audioplayers/src/notifications/notification_service.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/audioplayers/src/api/release_mode.dart', 'packages/uuid/uuid.dart', 'packages/http/src/multipart_request.dart', 'packages/path_provider/path_provider.dart'], (function load__packages__audioplayers__src__logger_dart(dart_sdk, packages__audioplayers__src__api__log_level$46dart, packages__audioplayers__src__api__player_mode$46dart, packages__audioplayers__src__api__player_state$46dart, packages__audioplayers__src__api__playing_route$46dart, packages__audioplayers__src__notifications__notification_service$46dart, packages__flutter__src__services__system_channels$46dart, packages__audioplayers__src__api__release_mode$46dart, packages__uuid__uuid$46dart, packages__http__src__multipart_request$46dart, packages__path_provider__path_provider$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const io = dart_sdk.io;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const log_level = packages__audioplayers__src__api__log_level$46dart.src__api__log_level;
  const player_mode = packages__audioplayers__src__api__player_mode$46dart.src__api__player_mode;
  const player_state = packages__audioplayers__src__api__player_state$46dart.src__api__player_state;
  const playing_route = packages__audioplayers__src__api__playing_route$46dart.src__api__playing_route;
  const notification_service = packages__audioplayers__src__notifications__notification_service$46dart.src__notifications__notification_service;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const asset_bundle = packages__flutter__src__services__system_channels$46dart.src__services__asset_bundle;
  const release_mode = packages__audioplayers__src__api__release_mode$46dart.src__api__release_mode;
  const uuid = packages__uuid__uuid$46dart.uuid;
  const http = packages__http__src__multipart_request$46dart.http;
  const path_provider = packages__path_provider__path_provider$46dart.path_provider;
  var logger = Object.create(dart.library);
  var audioplayer = Object.create(dart.library);
  var audio_cache = Object.create(dart.library);
  var audioplayers = Object.create(dart.library);
  var $_set = dartx._set;
  var $entries = dartx.entries;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $add = dartx.add;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $values = dartx.values;
  var $map = dartx.map;
  var $buffer = dartx.buffer;
  var $asUint8List = dartx.asUint8List;
  var $containsKey = dartx.containsKey;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    StreamControllerOfPlayerState: () => (T.StreamControllerOfPlayerState = dart.constFn(async.StreamController$(player_state.PlayerState)))(),
    StreamControllerOfDuration: () => (T.StreamControllerOfDuration = dart.constFn(async.StreamController$(core.Duration)))(),
    StreamControllerOfvoid: () => (T.StreamControllerOfvoid = dart.constFn(async.StreamController$(dart.void)))(),
    StreamControllerOfbool: () => (T.StreamControllerOfbool = dart.constFn(async.StreamController$(core.bool)))(),
    StreamControllerOfString: () => (T.StreamControllerOfString = dart.constFn(async.StreamController$(core.String)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    JSArrayOfFuture: () => (T.JSArrayOfFuture = dart.constFn(_interceptors.JSArray$(async.Future)))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    MethodCallToFutureOfvoid: () => (T.MethodCallToFutureOfvoid = dart.constFn(dart.fnType(T.FutureOfvoid(), [message_codec.MethodCall])))(),
    IdentityMapOfString$AudioPlayer: () => (T.IdentityMapOfString$AudioPlayer = dart.constFn(_js_helper.IdentityMap$(core.String, audioplayer.AudioPlayer)))(),
    IdentityMapOfString$Uri: () => (T.IdentityMapOfString$Uri = dart.constFn(_js_helper.IdentityMap$(core.String, core.Uri)))(),
    FutureOfUri: () => (T.FutureOfUri = dart.constFn(async.Future$(core.Uri)))(),
    ListOfUri: () => (T.ListOfUri = dart.constFn(core.List$(core.Uri)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: player_mode.PlayerMode.prototype,
        [_name]: "PlayerMode.MEDIA_PLAYER",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.constMap(T.StringL(), dart.dynamic, []);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[4] || CT.C4
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[3] || CT.C3,
        [MethodChannel_name]: "xyz.luan/audioplayers"
      });
    },
    get C5() {
      return C[5] = dart.fn(audioplayer.AudioPlayer.platformCallHandler, T.MethodCallToFutureOfvoid());
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: uuid.Uuid.prototype,
        [Uuid_options]: null
      });
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "file:///C:/Users/khati/Downloads/flutter_windows_2.2.2-stable/flutter/.pub-cache/hosted/pub.dartlang.org/audioplayers-0.20.1/lib/src/logger.dart",
    "package:audioplayers/src/logger.dart",
    "file:///C:/Users/khati/Downloads/flutter_windows_2.2.2-stable/flutter/.pub-cache/hosted/pub.dartlang.org/audioplayers-0.20.1/lib/src/audioplayer.dart",
    "package:audioplayers/src/audioplayer.dart",
    "file:///C:/Users/khati/Downloads/flutter_windows_2.2.2-stable/flutter/.pub-cache/hosted/pub.dartlang.org/audioplayers-0.20.1/lib/src/audio_cache.dart",
    "package:audioplayers/src/audio_cache.dart"
  ];
  logger.Logger = class Logger extends core.Object {
    static get logLevel() {
      return logger.Logger._logLevel;
    }
    static changeLogLevel(value) {
      if (value == null) dart.nullFailed(I[0], 9, 46, "value");
      logger.Logger._logLevel = value;
      return audioplayer.AudioPlayer.invokeMethod("changeLogLevel", new (T.IdentityMapOfString$dynamic()).from(["value", dart.toString(value)]));
    }
    static log(level, message) {
      if (level == null) dart.nullFailed(I[0], 21, 28, "level");
      if (message == null) dart.nullFailed(I[0], 21, 42, "message");
      if (dart.notNull(log_level['LogLevelExtension|getLevel'](level)) <= dart.notNull(log_level['LogLevelExtension|getLevel'](logger.Logger.logLevel))) {
        core.print(message);
      }
    }
    static info(message) {
      if (message == null) dart.nullFailed(I[0], 27, 27, "message");
      return logger.Logger.log(log_level.LogLevel.INFO, message);
    }
    static error(message) {
      if (message == null) dart.nullFailed(I[0], 29, 28, "message");
      return logger.Logger.log(log_level.LogLevel.ERROR, message);
    }
  };
  (logger.Logger.__ = function() {
    dart.throw(new core.UnimplementedError.new());
  }).prototype = logger.Logger.prototype;
  dart.addTypeTests(logger.Logger);
  dart.addTypeCaches(logger.Logger);
  dart.setLibraryUri(logger.Logger, I[1]);
  dart.defineLazy(logger.Logger, {
    /*logger.Logger._logLevel*/get _logLevel() {
      return log_level.LogLevel.ERROR;
    },
    set _logLevel(_) {}
  }, false);
  var playerId$ = dart.privateName(audioplayer, "AudioPlayer.playerId");
  var mode$ = dart.privateName(audioplayer, "AudioPlayer.mode");
  var _name = dart.privateName(player_mode, "_name");
  var _playerStateController = dart.privateName(audioplayer, "_playerStateController");
  var _notificationPlayerStateController = dart.privateName(audioplayer, "_notificationPlayerStateController");
  var _positionController = dart.privateName(audioplayer, "_positionController");
  var _durationController = dart.privateName(audioplayer, "_durationController");
  var _completionController = dart.privateName(audioplayer, "_completionController");
  var _seekCompleteController = dart.privateName(audioplayer, "_seekCompleteController");
  var _errorController = dart.privateName(audioplayer, "_errorController");
  var _playingRouteState = dart.privateName(audioplayer, "_playingRouteState");
  var __AudioPlayer_notificationService = dart.privateName(audioplayer, "_#AudioPlayer#notificationService");
  var __AudioPlayer_notificationService_isSet = dart.privateName(audioplayer, "_#AudioPlayer#notificationService#isSet");
  var _playerState = dart.privateName(audioplayer, "_playerState");
  var _invokeMethod = dart.privateName(audioplayer, "_invokeMethod");
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  var Uuid_options = dart.privateName(uuid, "Uuid.options");
  audioplayer.AudioPlayer = class AudioPlayer extends core.Object {
    get playerId() {
      return this[playerId$];
    }
    set playerId(value) {
      super.playerId = value;
    }
    get mode() {
      return this[mode$];
    }
    set mode(value) {
      super.mode = value;
    }
    set notificationService(t0) {
      if (t0 == null) dart.nullFailed(I[2], 58, 28, "null");
      this[__AudioPlayer_notificationService_isSet] = true;
      this[__AudioPlayer_notificationService] = t0;
    }
    get notificationService() {
      let t1;
      return dart.test(this[__AudioPlayer_notificationService_isSet]) ? (t1 = this[__AudioPlayer_notificationService], t1) : dart.throw(new _internal.LateError.fieldNI("notificationService"));
    }
    get state() {
      return this[_playerState];
    }
    set state(state) {
      if (state == null) dart.nullFailed(I[2], 64, 25, "state");
      this[_playerStateController].add(state);
      this[_playerState] = state;
    }
    set playingRouteState(routeState) {
      if (routeState == null) dart.nullFailed(I[2], 69, 38, "routeState");
      this[_playingRouteState] = routeState;
    }
    set notificationState(state) {
      if (state == null) dart.nullFailed(I[2], 74, 37, "state");
      this[_notificationPlayerStateController].add(state);
      this[_playerState] = state;
    }
    get onPlayerStateChanged() {
      return this[_playerStateController].stream;
    }
    get onNotificationPlayerStateChanged() {
      return this[_notificationPlayerStateController].stream;
    }
    get onAudioPositionChanged() {
      return this[_positionController].stream;
    }
    get onDurationChanged() {
      return this[_durationController].stream.distinct();
    }
    get onPlayerCompletion() {
      return this[_completionController].stream;
    }
    get onSeekComplete() {
      return this[_seekCompleteController].stream;
    }
    get onPlayerError() {
      return this[_errorController].stream;
    }
    [_invokeMethod](method, $arguments = C[1] || CT.C1) {
      if (method == null) dart.nullFailed(I[2], 136, 12, "method");
      if ($arguments == null) dart.nullFailed(I[2], 137, 26, "arguments");
      let enhancedArgs = (() => {
        let t1 = new (T.IdentityMapOfString$dynamic()).new();
        for (let t2 of $arguments[$entries])
          t1[$_set](t2.key, t2.value);
        t1[$_set]("playerId", this.playerId);
        t1[$_set]("mode", dart.toString(this.mode));
        return t1;
      })();
      return audioplayer.AudioPlayer.invokeMethod(method, enhancedArgs);
    }
    static invokeMethod(method, args) {
      if (method == null) dart.nullFailed(I[2], 148, 12, "method");
      if (args == null) dart.nullFailed(I[2], 149, 26, "args");
      return async.async(core.int, function* invokeMethod() {
        let t3;
        let result = (yield audioplayer.AudioPlayer._channel.invokeMethod(core.int, method, args));
        t3 = result;
        return t3 == null ? 0 : t3;
      });
    }
    play(url, opts) {
      if (url == null) dart.nullFailed(I[2], 163, 12, "url");
      let isLocal = opts && 'isLocal' in opts ? opts.isLocal : null;
      let volume = opts && 'volume' in opts ? opts.volume : 1;
      if (volume == null) dart.nullFailed(I[2], 165, 12, "volume");
      let position = opts && 'position' in opts ? opts.position : null;
      let respectSilence = opts && 'respectSilence' in opts ? opts.respectSilence : false;
      if (respectSilence == null) dart.nullFailed(I[2], 168, 10, "respectSilence");
      let stayAwake = opts && 'stayAwake' in opts ? opts.stayAwake : false;
      if (stayAwake == null) dart.nullFailed(I[2], 169, 10, "stayAwake");
      let duckAudio = opts && 'duckAudio' in opts ? opts.duckAudio : false;
      if (duckAudio == null) dart.nullFailed(I[2], 170, 10, "duckAudio");
      let recordingActive = opts && 'recordingActive' in opts ? opts.recordingActive : false;
      if (recordingActive == null) dart.nullFailed(I[2], 171, 10, "recordingActive");
      return async.async(core.int, (function* play() {
        let t3, t3$;
        let result = (yield this[_invokeMethod]("play", new (T.IdentityMapOfString$dynamic()).from(["url", url, "isLocal", (t3 = isLocal, t3 == null ? this.isLocalUrl(url) : t3), "volume", volume, "position", (t3$ = position, t3$ == null ? null : t3$.inMilliseconds), "respectSilence", respectSilence, "stayAwake", stayAwake, "duckAudio", duckAudio, "recordingActive", recordingActive])));
        if (result === 1) {
          this.state = player_state.PlayerState.PLAYING;
        }
        return result;
      }).bind(this));
    }
    playBytes(bytes, opts) {
      if (bytes == null) dart.nullFailed(I[2], 198, 15, "bytes");
      let volume = opts && 'volume' in opts ? opts.volume : 1;
      if (volume == null) dart.nullFailed(I[2], 199, 12, "volume");
      let position = opts && 'position' in opts ? opts.position : null;
      let respectSilence = opts && 'respectSilence' in opts ? opts.respectSilence : false;
      if (respectSilence == null) dart.nullFailed(I[2], 202, 10, "respectSilence");
      let stayAwake = opts && 'stayAwake' in opts ? opts.stayAwake : false;
      if (stayAwake == null) dart.nullFailed(I[2], 203, 10, "stayAwake");
      let duckAudio = opts && 'duckAudio' in opts ? opts.duckAudio : false;
      if (duckAudio == null) dart.nullFailed(I[2], 204, 10, "duckAudio");
      let recordingActive = opts && 'recordingActive' in opts ? opts.recordingActive : false;
      if (recordingActive == null) dart.nullFailed(I[2], 205, 10, "recordingActive");
      return async.async(core.int, (function* playBytes() {
        let t3;
        if (!dart.test(audioplayer.AudioPlayer._isAndroid())) {
          dart.throw(new message_codec.PlatformException.new({code: "Not supported", message: "Only Android is currently supported"}));
        }
        let result = (yield this[_invokeMethod]("playBytes", new (T.IdentityMapOfString$dynamic()).from(["bytes", bytes, "volume", volume, "position", (t3 = position, t3 == null ? null : t3.inMilliseconds), "respectSilence", respectSilence, "stayAwake", stayAwake, "duckAudio", duckAudio, "recordingActive", recordingActive])));
        if (result === 1) {
          this.state = player_state.PlayerState.PLAYING;
        }
        return result;
      }).bind(this));
    }
    pause() {
      return async.async(core.int, (function* pause() {
        let result = (yield this[_invokeMethod]("pause"));
        if (result === 1) {
          this.state = player_state.PlayerState.PAUSED;
        }
        return result;
      }).bind(this));
    }
    stop() {
      return async.async(core.int, (function* stop() {
        let result = (yield this[_invokeMethod]("stop"));
        if (result === 1) {
          this.state = player_state.PlayerState.STOPPED;
        }
        return result;
      }).bind(this));
    }
    resume() {
      return async.async(core.int, (function* resume() {
        let result = (yield this[_invokeMethod]("resume"));
        if (result === 1) {
          this.state = player_state.PlayerState.PLAYING;
        }
        return result;
      }).bind(this));
    }
    release() {
      return async.async(core.int, (function* release() {
        let result = (yield this[_invokeMethod]("release"));
        if (result === 1) {
          this.state = player_state.PlayerState.STOPPED;
        }
        return result;
      }).bind(this));
    }
    seek(position) {
      if (position == null) dart.nullFailed(I[2], 289, 29, "position");
      this[_positionController].add(position);
      return this[_invokeMethod]("seek", new (T.IdentityMapOfString$dynamic()).from(["position", position.inMilliseconds]));
    }
    setVolume(volume) {
      if (volume == null) dart.nullFailed(I[2], 303, 32, "volume");
      return this[_invokeMethod]("setVolume", new (T.IdentityMapOfString$dynamic()).from(["volume", volume]));
    }
    setReleaseMode(releaseMode) {
      if (releaseMode == null) dart.nullFailed(I[2], 315, 42, "releaseMode");
      return this[_invokeMethod]("setReleaseMode", new (T.IdentityMapOfString$dynamic()).from(["releaseMode", dart.toString(releaseMode)]));
    }
    setPlaybackRate(playbackRate) {
      if (playbackRate == null) dart.nullFailed(I[2], 328, 38, "playbackRate");
      return this[_invokeMethod]("setPlaybackRate", new (T.IdentityMapOfString$dynamic()).from(["playbackRate", playbackRate]));
    }
    setUrl(url, opts) {
      let t3;
      if (url == null) dart.nullFailed(I[2], 346, 12, "url");
      let isLocal = opts && 'isLocal' in opts ? opts.isLocal : null;
      let respectSilence = opts && 'respectSilence' in opts ? opts.respectSilence : false;
      if (respectSilence == null) dart.nullFailed(I[2], 348, 10, "respectSilence");
      let recordingActive = opts && 'recordingActive' in opts ? opts.recordingActive : false;
      if (recordingActive == null) dart.nullFailed(I[2], 349, 10, "recordingActive");
      return this[_invokeMethod]("setUrl", new (T.IdentityMapOfString$dynamic()).from(["url", url, "isLocal", (t3 = isLocal, t3 == null ? this.isLocalUrl(url) : t3), "respectSilence", respectSilence, "recordingActive", recordingActive]));
    }
    getDuration() {
      return this[_invokeMethod]("getDuration");
    }
    getCurrentPosition() {
      return async.async(core.int, (function* getCurrentPosition() {
        return this[_invokeMethod]("getCurrentPosition");
      }).bind(this));
    }
    static platformCallHandler(call) {
      if (call == null) dart.nullFailed(I[2], 376, 54, "call");
      return async.async(dart.void, function* platformCallHandler() {
        try {
          audioplayer.AudioPlayer._doHandlePlatformCall(call);
        } catch (e) {
          let ex = dart.getThrown(e);
          if (core.Object.is(ex)) {
            logger.Logger.error("Unexpected error: " + dart.str(ex));
          } else
            throw e;
        }
      });
    }
    static _doHandlePlatformCall(call) {
      if (call == null) dart.nullFailed(I[2], 384, 56, "call");
      return async.async(dart.void, function* _doHandlePlatformCall() {
        let callArgs = core.Map.as(call.arguments);
        logger.Logger.info("_platformCallHandler call " + dart.str(call.method) + " " + dart.str(callArgs));
        let playerId = core.String.as(callArgs[$_get]("playerId"));
        let player = audioplayer.AudioPlayer.players[$_get](playerId);
        if (!false && dart.test(audioplayer.AudioPlayer._isAndroid()) && player == null) {
          let oldPlayer = new audioplayer.AudioPlayer.new({playerId: playerId});
          yield oldPlayer.release();
          oldPlayer.dispose();
          audioplayer.AudioPlayer.players[$remove](playerId);
          return;
        }
        if (player == null) {
          return;
        }
        switch (call.method) {
          case "audio.onNotificationPlayerStateChanged":
          {
            let isPlaying = core.bool.as(callArgs[$_get]("value"));
            player.notificationState = dart.test(isPlaying) ? player_state.PlayerState.PLAYING : player_state.PlayerState.PAUSED;
            break;
          }
          case "audio.onDuration":
          {
            let millis = core.int.as(callArgs[$_get]("value"));
            let newDuration = new core.Duration.new({milliseconds: millis});
            player[_durationController].add(newDuration);
            break;
          }
          case "audio.onCurrentPosition":
          {
            let millis = core.int.as(callArgs[$_get]("value"));
            let newDuration = new core.Duration.new({milliseconds: millis});
            player[_positionController].add(newDuration);
            break;
          }
          case "audio.onComplete":
          {
            player.state = player_state.PlayerState.COMPLETED;
            player[_completionController].add(null);
            break;
          }
          case "audio.onSeekComplete":
          {
            let complete = core.bool.as(callArgs[$_get]("value"));
            player[_seekCompleteController].add(complete);
            break;
          }
          case "audio.onError":
          {
            let error = core.String.as(callArgs[$_get]("value"));
            player.state = player_state.PlayerState.STOPPED;
            player[_errorController].add(error);
            break;
          }
          case "audio.onGotNextTrackCommand":
          {
            player.notificationService.notifyNextTrack();
            break;
          }
          case "audio.onGotPreviousTrackCommand":
          {
            player.notificationService.notifyPreviousTrack();
            break;
          }
          default:
          {
            logger.Logger.error("Unknown method " + dart.str(call.method) + " ");
          }
        }
      });
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        yield this.release();
        let futures = T.JSArrayOfFuture().of([]);
        if (!dart.test(this[_playerStateController].isClosed)) {
          futures[$add](this[_playerStateController].close());
        }
        if (!dart.test(this[_notificationPlayerStateController].isClosed)) {
          futures[$add](this[_notificationPlayerStateController].close());
        }
        if (!dart.test(this[_positionController].isClosed)) {
          futures[$add](this[_positionController].close());
        }
        if (!dart.test(this[_durationController].isClosed)) {
          futures[$add](this[_durationController].close());
        }
        if (!dart.test(this[_completionController].isClosed)) {
          futures[$add](this[_completionController].close());
        }
        if (!dart.test(this[_seekCompleteController].isClosed)) {
          futures[$add](this[_seekCompleteController].close());
        }
        if (!dart.test(this[_errorController].isClosed)) {
          futures[$add](this[_errorController].close());
        }
        futures[$add](this.notificationService.dispose());
        yield async.Future.wait(dart.dynamic, futures);
        audioplayer.AudioPlayer.players[$remove](this.playerId);
      }).bind(this));
    }
    earpieceOrSpeakersToggle() {
      return async.async(core.int, (function* earpieceOrSpeakersToggle() {
        let playingRoute = playing_route['PlayingRouteExtensions|toggle'](this[_playingRouteState]);
        let result = (yield this[_invokeMethod]("earpieceOrSpeakersToggle", new (T.IdentityMapOfString$dynamic()).from(["playingRoute", playing_route['PlayingRouteExtensions|name'](playingRoute)])));
        if (result === 1) {
          this.playingRouteState = playingRoute;
        }
        return result;
      }).bind(this));
    }
    isLocalUrl(url) {
      if (url == null) dart.nullFailed(I[2], 495, 26, "url");
      return url[$startsWith]("/") || url[$startsWith]("file://") || url[$substring](1)[$startsWith](":\\");
    }
    static _isAndroid() {
      if (true) {
        return false;
      }
      return io.Platform.isAndroid;
    }
  };
  (audioplayer.AudioPlayer.new = function(opts) {
    let t0;
    let mode = opts && 'mode' in opts ? opts.mode : C[0] || CT.C0;
    if (mode == null) dart.nullFailed(I[2], 129, 21, "mode");
    let playerId = opts && 'playerId' in opts ? opts.playerId : null;
    this[_playerStateController] = T.StreamControllerOfPlayerState().broadcast();
    this[_notificationPlayerStateController] = T.StreamControllerOfPlayerState().broadcast();
    this[_positionController] = T.StreamControllerOfDuration().broadcast();
    this[_durationController] = T.StreamControllerOfDuration().broadcast();
    this[_completionController] = T.StreamControllerOfvoid().broadcast();
    this[_seekCompleteController] = T.StreamControllerOfbool().broadcast();
    this[_errorController] = T.StreamControllerOfString().broadcast();
    this[_playingRouteState] = playing_route.PlayingRoute.SPEAKERS;
    this[__AudioPlayer_notificationService] = null;
    this[__AudioPlayer_notificationService_isSet] = false;
    this[_playerState] = player_state.PlayerState.STOPPED;
    this[mode$] = mode;
    this[playerId$] = (t0 = playerId, t0 == null ? audioplayer.AudioPlayer._uuid.v4() : t0);
    audioplayer.AudioPlayer.players[$_set](this.playerId, this);
    this.notificationService = new notification_service.NotificationService.new(dart.bind(this, _invokeMethod));
  }).prototype = audioplayer.AudioPlayer.prototype;
  dart.addTypeTests(audioplayer.AudioPlayer);
  dart.addTypeCaches(audioplayer.AudioPlayer);
  dart.setMethodSignature(audioplayer.AudioPlayer, () => ({
    __proto__: dart.getMethods(audioplayer.AudioPlayer.__proto__),
    [_invokeMethod]: dart.fnType(async.Future$(core.int), [core.String], [core.Map$(core.String, dart.dynamic)]),
    play: dart.fnType(async.Future$(core.int), [core.String], {duckAudio: core.bool, isLocal: dart.nullable(core.bool), position: dart.nullable(core.Duration), recordingActive: core.bool, respectSilence: core.bool, stayAwake: core.bool, volume: core.double}, {}),
    playBytes: dart.fnType(async.Future$(core.int), [typed_data.Uint8List], {duckAudio: core.bool, position: dart.nullable(core.Duration), recordingActive: core.bool, respectSilence: core.bool, stayAwake: core.bool, volume: core.double}, {}),
    pause: dart.fnType(async.Future$(core.int), []),
    stop: dart.fnType(async.Future$(core.int), []),
    resume: dart.fnType(async.Future$(core.int), []),
    release: dart.fnType(async.Future$(core.int), []),
    seek: dart.fnType(async.Future$(core.int), [core.Duration]),
    setVolume: dart.fnType(async.Future$(core.int), [core.double]),
    setReleaseMode: dart.fnType(async.Future$(core.int), [release_mode.ReleaseMode]),
    setPlaybackRate: dart.fnType(async.Future$(core.int), [core.double]),
    setUrl: dart.fnType(async.Future$(core.int), [core.String], {isLocal: dart.nullable(core.bool), recordingActive: core.bool, respectSilence: core.bool}, {}),
    getDuration: dart.fnType(async.Future$(core.int), []),
    getCurrentPosition: dart.fnType(async.Future$(core.int), []),
    dispose: dart.fnType(async.Future$(dart.void), []),
    earpieceOrSpeakersToggle: dart.fnType(async.Future$(core.int), []),
    isLocalUrl: dart.fnType(core.bool, [core.String])
  }));
  dart.setGetterSignature(audioplayer.AudioPlayer, () => ({
    __proto__: dart.getGetters(audioplayer.AudioPlayer.__proto__),
    notificationService: notification_service.NotificationService,
    state: player_state.PlayerState,
    onPlayerStateChanged: async.Stream$(player_state.PlayerState),
    onNotificationPlayerStateChanged: async.Stream$(player_state.PlayerState),
    onAudioPositionChanged: async.Stream$(core.Duration),
    onDurationChanged: async.Stream$(core.Duration),
    onPlayerCompletion: async.Stream$(dart.void),
    onSeekComplete: async.Stream$(dart.void),
    onPlayerError: async.Stream$(core.String)
  }));
  dart.setSetterSignature(audioplayer.AudioPlayer, () => ({
    __proto__: dart.getSetters(audioplayer.AudioPlayer.__proto__),
    notificationService: notification_service.NotificationService,
    state: player_state.PlayerState,
    playingRouteState: playing_route.PlayingRoute,
    notificationState: player_state.PlayerState
  }));
  dart.setLibraryUri(audioplayer.AudioPlayer, I[3]);
  dart.setFieldSignature(audioplayer.AudioPlayer, () => ({
    __proto__: dart.getFields(audioplayer.AudioPlayer.__proto__),
    [_playerStateController]: dart.finalFieldType(async.StreamController$(player_state.PlayerState)),
    [_notificationPlayerStateController]: dart.finalFieldType(async.StreamController$(player_state.PlayerState)),
    [_positionController]: dart.finalFieldType(async.StreamController$(core.Duration)),
    [_durationController]: dart.finalFieldType(async.StreamController$(core.Duration)),
    [_completionController]: dart.finalFieldType(async.StreamController$(dart.void)),
    [_seekCompleteController]: dart.finalFieldType(async.StreamController$(core.bool)),
    [_errorController]: dart.finalFieldType(async.StreamController$(core.String)),
    [_playingRouteState]: dart.fieldType(playing_route.PlayingRoute),
    [__AudioPlayer_notificationService]: dart.fieldType(dart.nullable(notification_service.NotificationService)),
    [__AudioPlayer_notificationService_isSet]: dart.fieldType(core.bool),
    [_playerState]: dart.fieldType(player_state.PlayerState),
    playerId: dart.finalFieldType(core.String),
    mode: dart.finalFieldType(player_mode.PlayerMode)
  }));
  dart.defineLazy(audioplayer.AudioPlayer, {
    /*audioplayer.AudioPlayer._channel*/get _channel() {
      let t4;
      return t4 = C[2] || CT.C2, (() => {
        t4.setMethodCallHandler(C[5] || CT.C5);
        return t4;
      })();
    },
    /*audioplayer.AudioPlayer._uuid*/get _uuid() {
      return C[6] || CT.C6;
    },
    /*audioplayer.AudioPlayer.players*/get players() {
      return new (T.IdentityMapOfString$AudioPlayer()).new();
    }
  }, false);
  var loadedFiles = dart.privateName(audio_cache, "AudioCache.loadedFiles");
  var prefix$ = dart.privateName(audio_cache, "AudioCache.prefix");
  var fixedPlayer$ = dart.privateName(audio_cache, "AudioCache.fixedPlayer");
  var respectSilence$ = dart.privateName(audio_cache, "AudioCache.respectSilence");
  var duckAudio$ = dart.privateName(audio_cache, "AudioCache.duckAudio");
  var _sanitizeURLForWeb = dart.privateName(audio_cache, "_sanitizeURLForWeb");
  var _player = dart.privateName(audio_cache, "_player");
  audio_cache.AudioCache = class AudioCache extends core.Object {
    get loadedFiles() {
      return this[loadedFiles];
    }
    set loadedFiles(value) {
      this[loadedFiles] = value;
    }
    get prefix() {
      return this[prefix$];
    }
    set prefix(value) {
      this[prefix$] = value;
    }
    get fixedPlayer() {
      return this[fixedPlayer$];
    }
    set fixedPlayer(value) {
      this[fixedPlayer$] = value;
    }
    get respectSilence() {
      return this[respectSilence$];
    }
    set respectSilence(value) {
      this[respectSilence$] = value;
    }
    get duckAudio() {
      return this[duckAudio$];
    }
    set duckAudio(value) {
      this[duckAudio$] = value;
    }
    clear(fileName) {
      if (fileName == null) dart.nullFailed(I[4], 67, 26, "fileName");
      return async.async(dart.void, (function* clear() {
        let uri = this.loadedFiles[$remove](fileName);
        if (uri != null && !true) {
          yield io.File.new(uri.toFilePath()).delete();
        }
      }).bind(this));
    }
    clearAll() {
      return async.async(dart.void, (function* clearAll() {
        yield async.Future.wait(dart.void, this.loadedFiles[$values][$map](T.FutureOfvoid(), dart.bind(this, 'clear')));
      }).bind(this));
    }
    fetchToMemory(fileName) {
      if (fileName == null) dart.nullFailed(I[4], 79, 36, "fileName");
      return async.async(core.Uri, (function* fetchToMemory() {
        if (true) {
          let uri = this[_sanitizeURLForWeb](fileName);
          yield http.get(uri);
          return uri;
        }
        let byteData = (yield asset_bundle.rootBundle.load(dart.str(this.prefix) + dart.str(fileName)));
        let file = io.File.new(dart.str((yield path_provider.getTemporaryDirectory()).path) + "/" + dart.str(fileName));
        yield file.create({recursive: true});
        yield file.writeAsBytes(byteData[$buffer][$asUint8List]());
        return file.uri;
      }).bind(this));
    }
    [_sanitizeURLForWeb](fileName) {
      let t4;
      if (fileName == null) dart.nullFailed(I[4], 100, 33, "fileName");
      let tryAbsolute = core.Uri.tryParse(fileName);
      if ((t4 = tryAbsolute, t4 == null ? null : t4.isAbsolute) === true) {
        return dart.nullCheck(tryAbsolute);
      }
      return core.Uri.parse("assets/" + dart.str(this.prefix) + dart.str(fileName));
    }
    load(fileName) {
      if (fileName == null) dart.nullFailed(I[4], 113, 27, "fileName");
      return async.async(core.Uri, (function* load() {
        if (!dart.test(this.loadedFiles[$containsKey](fileName))) {
          this.loadedFiles[$_set](fileName, yield this.fetchToMemory(fileName));
        }
        return dart.nullCheck(this.loadedFiles[$_get](fileName));
      }).bind(this));
    }
    loadAsFile(fileName) {
      if (fileName == null) dart.nullFailed(I[4], 124, 34, "fileName");
      return async.async(io.File, (function* loadAsFile() {
        if (true) {
          dart.throw("This method cannot be used on web!");
        }
        let uri = (yield this.load(fileName));
        return io.File.new(uri.toFilePath());
      }).bind(this));
    }
    loadAll(fileNames) {
      if (fileNames == null) dart.nullFailed(I[4], 135, 42, "fileNames");
      return async.async(T.ListOfUri(), (function* loadAll() {
        return async.Future.wait(core.Uri, fileNames[$map](T.FutureOfUri(), dart.bind(this, 'load')));
      }).bind(this));
    }
    [_player](mode) {
      let t4;
      if (mode == null) dart.nullFailed(I[4], 139, 34, "mode");
      t4 = this.fixedPlayer;
      return t4 == null ? new audioplayer.AudioPlayer.new({mode: mode}) : t4;
    }
    play(fileName, opts) {
      if (fileName == null) dart.nullFailed(I[4], 151, 12, "fileName");
      let volume = opts && 'volume' in opts ? opts.volume : 1;
      if (volume == null) dart.nullFailed(I[4], 152, 12, "volume");
      let isNotification = opts && 'isNotification' in opts ? opts.isNotification : null;
      let mode = opts && 'mode' in opts ? opts.mode : C[0] || CT.C0;
      if (mode == null) dart.nullFailed(I[4], 154, 16, "mode");
      let stayAwake = opts && 'stayAwake' in opts ? opts.stayAwake : false;
      if (stayAwake == null) dart.nullFailed(I[4], 155, 10, "stayAwake");
      let recordingActive = opts && 'recordingActive' in opts ? opts.recordingActive : false;
      if (recordingActive == null) dart.nullFailed(I[4], 156, 10, "recordingActive");
      let duckAudio = opts && 'duckAudio' in opts ? opts.duckAudio : null;
      return async.async(audioplayer.AudioPlayer, (function* play() {
        let t4, t4$;
        let uri = (yield this.load(fileName));
        let player = this[_player](mode);
        if (this.fixedPlayer != null) {
          yield player.setReleaseMode(release_mode.ReleaseMode.STOP);
        }
        yield player.play(dart.toString(uri), {volume: volume, respectSilence: (t4 = isNotification, t4 == null ? this.respectSilence : t4), stayAwake: stayAwake, recordingActive: recordingActive, duckAudio: (t4$ = duckAudio, t4$ == null ? this.duckAudio : t4$)});
        return player;
      }).bind(this));
    }
    playBytes(fileBytes, opts) {
      if (fileBytes == null) dart.nullFailed(I[4], 179, 15, "fileBytes");
      let volume = opts && 'volume' in opts ? opts.volume : 1;
      if (volume == null) dart.nullFailed(I[4], 180, 12, "volume");
      let isNotification = opts && 'isNotification' in opts ? opts.isNotification : null;
      let mode = opts && 'mode' in opts ? opts.mode : C[0] || CT.C0;
      if (mode == null) dart.nullFailed(I[4], 182, 16, "mode");
      let loop = opts && 'loop' in opts ? opts.loop : false;
      if (loop == null) dart.nullFailed(I[4], 183, 10, "loop");
      let stayAwake = opts && 'stayAwake' in opts ? opts.stayAwake : false;
      if (stayAwake == null) dart.nullFailed(I[4], 184, 10, "stayAwake");
      let recordingActive = opts && 'recordingActive' in opts ? opts.recordingActive : false;
      if (recordingActive == null) dart.nullFailed(I[4], 185, 10, "recordingActive");
      return async.async(audioplayer.AudioPlayer, (function* playBytes() {
        let t4;
        let player = this[_player](mode);
        if (dart.test(loop)) {
          yield player.setReleaseMode(release_mode.ReleaseMode.LOOP);
        } else if (this.fixedPlayer != null) {
          yield player.setReleaseMode(release_mode.ReleaseMode.STOP);
        }
        yield player.playBytes(fileBytes, {volume: volume, respectSilence: (t4 = isNotification, t4 == null ? this.respectSilence : t4), stayAwake: stayAwake, recordingActive: recordingActive});
        return player;
      }).bind(this));
    }
    loop(fileName, opts) {
      if (fileName == null) dart.nullFailed(I[4], 211, 12, "fileName");
      let volume = opts && 'volume' in opts ? opts.volume : 1;
      if (volume == null) dart.nullFailed(I[4], 212, 12, "volume");
      let isNotification = opts && 'isNotification' in opts ? opts.isNotification : null;
      let mode = opts && 'mode' in opts ? opts.mode : C[0] || CT.C0;
      if (mode == null) dart.nullFailed(I[4], 214, 16, "mode");
      let stayAwake = opts && 'stayAwake' in opts ? opts.stayAwake : false;
      if (stayAwake == null) dart.nullFailed(I[4], 215, 10, "stayAwake");
      return async.async(audioplayer.AudioPlayer, (function* loop() {
        let t4;
        let url = (yield this.load(fileName));
        let player = this[_player](mode);
        yield player.setReleaseMode(release_mode.ReleaseMode.LOOP);
        yield player.play(dart.toString(url), {volume: volume, respectSilence: (t4 = isNotification, t4 == null ? this.respectSilence : t4), stayAwake: stayAwake});
        return player;
      }).bind(this));
    }
  };
  (audio_cache.AudioCache.new = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : "assets/";
    if (prefix == null) dart.nullFailed(I[4], 57, 10, "prefix");
    let fixedPlayer = opts && 'fixedPlayer' in opts ? opts.fixedPlayer : null;
    let respectSilence = opts && 'respectSilence' in opts ? opts.respectSilence : false;
    if (respectSilence == null) dart.nullFailed(I[4], 59, 10, "respectSilence");
    let duckAudio = opts && 'duckAudio' in opts ? opts.duckAudio : false;
    if (duckAudio == null) dart.nullFailed(I[4], 60, 10, "duckAudio");
    this[loadedFiles] = new (T.IdentityMapOfString$Uri()).new();
    this[prefix$] = prefix;
    this[fixedPlayer$] = fixedPlayer;
    this[respectSilence$] = respectSilence;
    this[duckAudio$] = duckAudio;
    ;
  }).prototype = audio_cache.AudioCache.prototype;
  dart.addTypeTests(audio_cache.AudioCache);
  dart.addTypeCaches(audio_cache.AudioCache);
  dart.setMethodSignature(audio_cache.AudioCache, () => ({
    __proto__: dart.getMethods(audio_cache.AudioCache.__proto__),
    clear: dart.fnType(async.Future$(dart.void), [core.Uri]),
    clearAll: dart.fnType(async.Future$(dart.void), []),
    fetchToMemory: dart.fnType(async.Future$(core.Uri), [core.String]),
    [_sanitizeURLForWeb]: dart.fnType(core.Uri, [core.String]),
    load: dart.fnType(async.Future$(core.Uri), [core.String]),
    loadAsFile: dart.fnType(async.Future$(io.File), [core.String]),
    loadAll: dart.fnType(async.Future$(core.List$(core.Uri)), [core.List$(core.String)]),
    [_player]: dart.fnType(audioplayer.AudioPlayer, [player_mode.PlayerMode]),
    play: dart.fnType(async.Future$(audioplayer.AudioPlayer), [core.String], {duckAudio: dart.nullable(core.bool), isNotification: dart.nullable(core.bool), mode: player_mode.PlayerMode, recordingActive: core.bool, stayAwake: core.bool, volume: core.double}, {}),
    playBytes: dart.fnType(async.Future$(audioplayer.AudioPlayer), [typed_data.Uint8List], {isNotification: dart.nullable(core.bool), loop: core.bool, mode: player_mode.PlayerMode, recordingActive: core.bool, stayAwake: core.bool, volume: core.double}, {}),
    loop: dart.fnType(async.Future$(audioplayer.AudioPlayer), [core.String], {isNotification: dart.nullable(core.bool), mode: player_mode.PlayerMode, stayAwake: core.bool, volume: core.double}, {})
  }));
  dart.setLibraryUri(audio_cache.AudioCache, I[5]);
  dart.setFieldSignature(audio_cache.AudioCache, () => ({
    __proto__: dart.getFields(audio_cache.AudioCache.__proto__),
    loadedFiles: dart.fieldType(core.Map$(core.String, core.Uri)),
    prefix: dart.fieldType(core.String),
    fixedPlayer: dart.fieldType(dart.nullable(audioplayer.AudioPlayer)),
    respectSilence: dart.fieldType(core.bool),
    duckAudio: dart.fieldType(core.bool)
  }));
  dart.trackLibraries("packages/audioplayers/src/logger.dart", {
    "package:audioplayers/src/logger.dart": logger,
    "package:audioplayers/src/audioplayer.dart": audioplayer,
    "package:audioplayers/src/audio_cache.dart": audio_cache,
    "package:audioplayers/audioplayers.dart": audioplayers
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["logger.dart","audioplayer.dart","audio_cache.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../D:/packages/audioplayers/src/logger.dart.lib.js"}');
  // Exports:
  return {
    src__logger: logger,
    src__audioplayer: audioplayer,
    src__audio_cache: audio_cache,
    audioplayers: audioplayers
  };
}));

//# sourceMappingURL=logger.dart.lib.js.map
